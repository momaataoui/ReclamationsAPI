// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReclamationsAPI.Data;

#nullable disable

namespace ReclamationsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250812121610_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("ReclamationsAPI.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Commentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EstPrive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReclamationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReclamationId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.ObservateurReclamation", b =>
                {
                    b.Property<int>("ReclamationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObservateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReclamationId", "ObservateurId");

                    b.HasIndex("ObservateurId");

                    b.ToTable("ObservateursReclamations");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Reclamation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssigneAId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSoumission")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Objet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SousCategorieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatutId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssigneAId");

                    b.HasIndex("SousCategorieId");

                    b.HasIndex("StatutId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Reclamations");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.SousCategorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategorieId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.ToTable("SousCategories");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Statut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuts");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Commentaire", b =>
                {
                    b.HasOne("ReclamationsAPI.Models.Reclamation", "Reclamation")
                        .WithMany("Commentaires")
                        .HasForeignKey("ReclamationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReclamationsAPI.Models.Utilisateur", "Auteur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auteur");

                    b.Navigation("Reclamation");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.ObservateurReclamation", b =>
                {
                    b.HasOne("ReclamationsAPI.Models.Utilisateur", "Observateur")
                        .WithMany()
                        .HasForeignKey("ObservateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReclamationsAPI.Models.Reclamation", "Reclamation")
                        .WithMany("Observateurs")
                        .HasForeignKey("ReclamationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Observateur");

                    b.Navigation("Reclamation");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Reclamation", b =>
                {
                    b.HasOne("ReclamationsAPI.Models.Utilisateur", "AssigneA")
                        .WithMany()
                        .HasForeignKey("AssigneAId");

                    b.HasOne("ReclamationsAPI.Models.SousCategorie", "SousCategorie")
                        .WithMany()
                        .HasForeignKey("SousCategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReclamationsAPI.Models.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("StatutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReclamationsAPI.Models.Utilisateur", "Createur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssigneA");

                    b.Navigation("Createur");

                    b.Navigation("SousCategorie");

                    b.Navigation("Statut");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.SousCategorie", b =>
                {
                    b.HasOne("ReclamationsAPI.Models.Categorie", "Categorie")
                        .WithMany("SousCategories")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Categorie", b =>
                {
                    b.Navigation("SousCategories");
                });

            modelBuilder.Entity("ReclamationsAPI.Models.Reclamation", b =>
                {
                    b.Navigation("Commentaires");

                    b.Navigation("Observateurs");
                });
#pragma warning restore 612, 618
        }
    }
}
